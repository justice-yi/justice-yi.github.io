<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Justice-yi &#39;s Blog</title>
		<link>https://justice-yi.github.io/posts/</link>
		<description>Recent content in Posts on Justice-yi &#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cmn-Hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 16 Oct 2019 00:31:55 +0800</lastBuildDate>
		<atom:link href="https://justice-yi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>C语言：标准IO_fopen( )、fclose() ①</title>
			<link>https://justice-yi.github.io/posts/fopen-fclose/</link>
			<pubDate>Wed, 16 Oct 2019 00:31:55 +0800</pubDate>
			
			<guid>https://justice-yi.github.io/posts/fopen-fclose/</guid>
			<description>思前想后一个月，我终于敲下了我的第一篇开山之作。
博客千千万，我的博客首先记录的是学习时候的理解，用于给自己翻阅查找，现在主要研究的是C语言和STM32。如果能帮到你，那是最好的，假如我写的东西有错误欢迎指正，所以请反复对比，仅作参考。其次，这里不仅记录学习，也会写下我在朋友圈不能公开的想法和秘密！
马上进入主题
一、什么是文件？ 　我相信，就算接触过C语言的文件输入输出的人，还会回答：文件不就是鼠标点击的东西嘛！其实不全对，因为在C语言程序中，文件有着更广泛的定义：文件通常是在磁盘或硬盘上的已命名的储存区。
要看到是通常，那么就说明会有不寻常的。对于C程序来说，设备也可以看成是文件！例如屏幕和键盘。看到这里的朋友会有一个疑问：那么C程序和语言有什么关系呢？文件对C程序有什么重要性呢？

简单地理解，文件能够输入一些必要的数据给程序使用以及程序输出数据到文件保存。

&amp;nbsp;
1.1&amp;nbsp; 文件的两种形式 在C程序看来，文件只有两种形式。
 文本文件 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;二进制文件&amp;nbsp;  文本文件即里面的数据都是字符。&amp;nbsp;字符传化成对应的ASCII码存放在内存中。如&amp;ldquo;ABC&amp;rdquo;就分别是&amp;lsquo;A&amp;rsquo;、&#39;B&#39;、&#39;C&#39;存放
二进制文件即里面的数据直接存放在内存中。无需转换为ASCII码，可以理解为机器语言（只有0和1）。例如整数1000转换为二进制为‭0010 0111 0001 0000‬，直接存储在内存中。
二、利用标准IO操作文件 2.1&amp;nbsp; 标准IO（standard high-level I/0）是什么 标准IOANSI C建立的标准函数包和stdio.h头文件中的定义。通俗的来讲就是一些操作IO的库函数，至于是怎么实现的我也不知道。今天我们来讲三个函数：fopen(),&amp;nbsp; fclose().
分别对应着打开文件、关闭文件两个功能。
其次，与标准IO对应着的还有文件IO或者叫底层IO（low-level I/O）。暂时不需要关心。
&amp;nbsp; 2.2&amp;nbsp; 标准文件 一开始提到，一些设备都被C程序看做是文件。所以C语言定义了三个标准文件：标准输入(standard input)、标准输出(standard output)、标准错误输出(standard error output).
分别对应着键盘、屏幕、屏幕。但是，标准错误输出强制性输出到屏幕（即使重定向到其他文件啦显示错误信息）。看到这里看不懂没关系，我们结合下面的函数讲解就懂了。
标准文件和对应文件指针   标准文件 文件指针 通常使用的设备   标准输入 stdin 键盘   标准输出 stdout 显示器　   标准错误输出 stderr 显示器    &amp;nbsp;</description>
			<content type="html"><![CDATA[<p style="margin-left: 30px;"><span style="color: #333399;">思前想后一个月，我终于敲下了我的第一篇开山之作。</span></p>
<p style="margin-left: 30px;"><span style="color: #333399;">博客千千万，我的博客首先记录的是学习时候的理解，用于给自己翻阅查找，现在主要研究的是<span style="font-size: 14pt;">C语言</span>和<span style="font-size: 14pt;">STM32</span>。如果能帮到你，那是最好的，假如我写的东西有错误欢迎指正，所以请反复对比，仅作参考。其次，这里不仅记录学习，也会写下我在朋友圈不能公开的想法和秘密！</span></p>
<p><span style="color: #333399;">马上进入主题</span></p>
<hr />
<h1>一、什么是文件？</h1>
<p>　　我相信，就算接触过C语言的文件输入输出的人，还会回答：文件不就是鼠标点击的东西嘛！其实不全对，因为在C语言程序中，文件有着更广泛的定义：<span style="color: #ff0000;">文件<span style="font-size: 18pt;">通常</span>是在磁盘或硬盘上的已命名的储存区。</span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">要看到是通常，那么就说明会有不寻常的。对于C程序来说，设备也可以看成是文件！例如屏幕和键盘。看到这里的朋友会有一个疑问：那么C程序和语言有什么关系呢？文件对C程序有什么重要性呢？</span><br /></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">简单地理解，文件能够输入一些必要的数据给程序使用以及程序输出数据到文件保存。</span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;"><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2018.cnblogs.com/blog/1768382/201908/1768382-20190828011007347-543740132.png" alt="" /></span></span></p>
<p>&nbsp;</p>
<h2><span style="color: #ff0000;"><span style="color: #000000;">　　1.1&nbsp; 文件的两种形式</span></span></h2>
<p><span style="color: #ff0000;"><span style="color: #000000;">　　在C程序看来，文件只有两种形式。</span></span></p>
<ul>
<li><strong><span style="color: #ff6600;">　　文本文件</span></strong></li>
<li><strong><span style="color: #ff6600;">&nbsp; &nbsp; &nbsp; &nbsp;二进制文件&nbsp;</span></strong></li>






















</ul>
<p style="margin-left: 30px;"><span style="color: #ff0000;">文本文件即里面的数据都是字符。&nbsp;<span style="color: #000000;">字符传化成对应的ASCII码存放在内存中。如&ldquo;ABC&rdquo;就分别是&lsquo;A&rsquo;、'B'、'C'存放</span></span></p>
<p style="margin-left: 30px;"><span style="color: #ff0000;">二进制文件即里面的数据直接存放在内存中。<span style="color: #000000;">无需转换为ASCII码，可以理解为机器语言（只有0和1）。例如整数1000转换为二进制为‭0010 0111 0001 0000‬，直接存储在内存中。</span></span></p>
<h1><span style="color: #ff0000;"><span style="color: #000000;">二、利用标准IO操作文件</span></span></h1>
<h2><span style="color: #ff0000;"><span style="color: #000000;">　　2.1&nbsp; 标准IO<sub><span style="font-size: 13px;">（standard high-level I/0）</span></sub>是什么</span></span></h2>
<p><span style="color: #ff0000;"><span style="color: #000000;">　　　　标准IOANSI C建立的标准函数包和stdio.h头文件中的定义。通俗的来讲就是一些操作IO的库函数，至于是怎么实现的我也不知道。今天我们来讲三个函数：<strong>fopen(),&nbsp; fclose().</strong></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">分别对应着<strong>打开文件、关闭文件</strong>两个功能。</span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">　　　　其次，与标准IO对应着的还有文件IO或者叫底层IO<span style="font-size: 12px;">（low-level I/O）</span>。暂时不需要关心。</span></span></p>
<h2 style="margin-left: 30px;"><span style="color: #ff0000;"><span style="color: #000000;">&nbsp; 2.2&nbsp; 标准文件</span></span></h2>
<p><span style="color: #ff0000;"><span style="color: #000000;">　　　　一开始提到，一些设备都被C程序看做是文件。所以C语言定义了三个标准文件：<strong>标准输入</strong><sub><span style="font-size: 12px;">(standard input)</span></sub>、<strong>标准输出</strong><sub><span style="font-size: 12px;">(standard output)</span></sub>、<strong>标准错误输出</strong><sub><span style="font-size: 12px;">(standard error output).</span></sub></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">分别对应着<strong>键盘</strong>、<strong>屏幕</strong>、<strong>屏幕。但是，</strong><span style="color: #ff0000;">标准错误输出强制性输出到屏幕</span>（即使重定向到其他文件啦显示错误信息）</span><span style="color: #000000;">。看到这里看不懂没关系，我们结合下面的函数讲解就懂了。</span></span></p>
<table style="height: 179px; width: 753px;" border="0" align="left"><caption>标准文件和对应文件指针</caption>
<tbody>
<tr>
<td><strong>标准文件</strong></td>
<td><strong>文件指针</strong></td>
<td><strong>通常使用的设备</strong></td>










</tr>
<tr>
<td>标准输入</td>
<td>stdin</td>
<td>键盘</td>










</tr>
<tr>
<td>标准输出</td>
<td>stdout</td>
<td>显示器　　</td>










</tr>
<tr>
<td>标准错误输出</td>
<td>stderr</td>
<td>显示器</td>










</tr>










</tbody>










</table>
<p>&nbsp;</p>
<p><strong>文件指针</strong>是即将要讲到函数里面的C语言里一个特殊的指针。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;"><span style="color: #000000;">　</span></span></p>
<p>&nbsp;</p>
<h1><span style="color: #ff0000;"><span style="color: #000000;">三、&nbsp; fopen()&nbsp;&nbsp;</span></span></h1>
<p><span style="color: #ff0000;"><span style="color: #000000;"><strong>函数介绍：</strong></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">打开或创建一个文件并且返回一个文件指针。</span></span></p>
<p><strong><span style="color: #ff0000;"><span style="color: #000000;">函数原型：</span></span></strong></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>FILE *fopen(<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> *path, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> *mode);</pre>
</div>
<p>&nbsp;FILE为一个结构体 但是这个结构体太复杂，暂时不需要弄清楚。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>&nbsp;函数详解：</strong></p>
<p><strong>参数1</strong>：<span style="color: #0000ff;">const char</span> *path ，这是一个指针，char表明指向的是一个字符串，const表明不能通过path指针变量去修改这个字符串。</p>
<p>　 这个字符串指定了你要准备打开或创建的文件路径和名称，例如&ldquo;我好饿啊.txt&rdquo;</p>
<p><strong>参数2</strong>：设置打开的模式。可输入的参数有如下：</p>
<table style="height: 205px; width: 809px;" border="0" align="left">
<tbody>
<tr>
<td><strong>模式</strong></td>
<td><strong>含义</strong></td>
</tr>
<tr>
<td>&ldquo;r&rdquo;</td>
<td>只能读</td>
</tr>
<tr>
<td>&ldquo;w&rdquo;</td>
<td>只能写，无此文件则创建，有此文件则清空</td>
</tr>
<tr>
<td>&ldquo;a&rdquo;</td>
<td>只能写，会在原来的文件后面添加内容。无此文件则创建文件</td>
</tr>
<tr>
<td>&ldquo;r+&rdquo;</td>
<td>读写文件</td>
</tr>
<tr>
<td>&ldquo;w+&rdquo;</td>
<td>读写文件，无此文件则创建，有此文件则清空</td>
</tr>
<tr>
<td>&ldquo;a+&rdquo;</td>
<td>读写文件，会在原来的文件后面添加内容。无此文件则创建文件</td>
</tr>
</tbody>
</table>
<p><strong><span style="color: #ff0000;">上述打开的都是文本本件</span></strong></p>
<p><strong><span style="color: #ff0000;">此外还有"rb", "wb", "ab", "r+b", "w+b", "a+b"，此时打开二进制文件。</span></strong></p>
<p><strong><span style="color: #ff0000;">path 参数可以是相对路径（../fishc.txt）也可以是绝对路径（/home/FishC/fishc.txt），如果只给出文件名而不包含路径，则表示该文件在当前文件夹中</span></strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>返回值：</strong></p>
<p>1. 如果文件打开成功，则返回一个指向 FILE 结构的文件指针；<br /><br />2. 如果文件打开失败，则返回 NULL 并设置 errno 为指定的错误。</p>
<p>&nbsp;举例子：</p>
<div class="cnblogs_code">
<pre>    FILE *fp；                <span style="color: #008000;">//</span><span style="color: #008000;">定义一个文件指针</span>
    fp=fopen(<span style="color: #800000;">"</span><span style="color: #800000;">c语言数据.txt</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">r</span><span style="color: #800000;">"</span>)     <span style="color: #008000;">//</span><span style="color: #008000;">以只读的方式打开文本文件，并返回一个文本指针给fp</span></pre>
</div>
<p>然后我们接下来就可以通过fp去操作文件，至于怎么实现不用管。可以理解为fp现在就指向了一个实际的txt文件。</p>
<p>而且，我们可以用过改变第二个参数感受一下他们之间的区别。</p>
<h1>四、fclose()</h1>
<p><strong>函数介绍：</strong></p>
<p>关闭文件先前用fopen（）打开的文件</p>
<p>关闭后会把缓冲区的数据送到程序或者文件（要看先前对文件的操作是读取文件数据还是输出数据到文件）</p>
<p><strong>函数原型：</strong></p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">int</span> fclose(FILE *fp);</pre>
</div>
<p><strong>函数详解：</strong></p>
<p><strong>参数：</strong>是一个文件指针，指向要关闭的文件。例如先前通过fopen（）把创建的文件给了fp，现在fp则代表着这个文件，操作fp即可关闭文件。</p>
<p><strong>返回值：</strong></p>
<p>1. 如果文件关闭成功，返回值是 0；<br /><br />2. 如果文件关闭失败，返回值是 EOF，并设置 errno 为指定的错误。</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;"><strong>记得操作完文件之后要用fclose（），因为调用了fclose函数才能把缓冲区的数据送到指定的地方。fopen和fclose最好同时使用。</strong></span></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000; font-size: 18pt;"><span style="color: #000000;">接下来我还会继续讲我对缓冲区和流的理解哦，以及fflush函数及其相关代码例子。敬请期待！</span></span></p>
]]></content>
		</item>
		
		<item>
			<title>更新文章后git的使用步骤</title>
			<link>https://justice-yi.github.io/posts/%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E5%90%8Egit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/</link>
			<pubDate>Wed, 02 Oct 2019 01:26:11 +0800</pubDate>
			
			<guid>https://justice-yi.github.io/posts/%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E5%90%8Egit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/</guid>
			<description>&amp;emsp;自从知道了很简单就可以搭建个人博客之后就一直在捣鼓git，看了一些视频无奈没有时间深入学习git的工作方式，只是大概学习了一下一些命令来满足我发博客的需求。期间因为不懂得git的工作方式而前前后后踩坑无数，现记录一些步骤和命令。
更新内容后如何git一git？  在hugo(基于你使用的平台，不限于hugo)根目录下：
hugo //为你的hugo重新生成文件 hugo server //如果需要的话可以本地预览 在public文件夹下：
git add. //添加内容到本地仓库 git commit -m &amp;#34;提交的信息&amp;#34; //为更新添加更新的信息告诉别人你做了什么更新 git pull origin master //拉取 git push -u origin master //推上去  以上一切基于hugo网站已经搭建完成的情况，更多的搭建方法可以上hugo或者B站学习</description>
			<content type="html"><![CDATA[

<p>&emsp;自从知道了很简单就可以搭建个人博客之后就一直在捣鼓git，看了一些视频无奈没有时间深入学习git的工作方式，只是大概学习了一下一些命令来满足我发博客的需求。期间因为不懂得git的工作方式而前前后后踩坑无数，现记录一些步骤和命令。</p>

<hr />

<h2 id="更新内容后如何git一git">更新内容后如何git一git？</h2>

<ul>
<li><p>在<a href="https://www.gohugo.org/">hugo</a>(基于你使用的平台，不限于hugo)根目录下：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">hugo                           //为你的hugo重新生成文件
hugo server                    //如果需要的话可以本地预览</code></pre></div></li>

<li><p>在public文件夹下：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">git add.                       //添加内容到本地仓库
git commit -m <span class="s2">&#34;提交的信息&#34;</span>      //为更新添加更新的信息告诉别人你做了什么更新
git pull origin master         //拉取
git push -u origin master      //推上去</code></pre></div></li>
</ul>

<p><font color="#FF0000" size=3 face="微软雅黑"><strong><em>以上一切基于hugo网站已经搭建完成的情况，更多的搭建方法可以上<a href="https://www.gohugo.org/">hugo</a>或者<a href="https://www.bilibili.com/">B站</a>学习</em></strong></font></p>
]]></content>
		</item>
		
		<item>
			<title>两种数学归纳法</title>
			<link>https://justice-yi.github.io/posts/%E4%B8%A4%E7%A7%8D%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</link>
			<pubDate>Mon, 16 Sep 2019 20:55:17 +0800</pubDate>
			
			<guid>https://justice-yi.github.io/posts/%E4%B8%A4%E7%A7%8D%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</guid>
			<description>第一类数学归纳法 1. 证明n=1时，fn命题成立
2. 设n=k时，fn命题成立
3. 证明n=k+1时，fn命题成立
4. 原命题得证
第二类数学归纳法 1. 证明n=1，n=2时，fn命题成立
2. 设n &amp;lt; k时，fn命题成立
3. 证明n=k时，fn命题成立
4. 原命题得证</description>
			<content type="html"><![CDATA[

<h2 id="第一类数学归纳法">第一类数学归纳法</h2>

<p><strong>1. 证明n=1时，fn命题成立</strong></p>

<p><strong>2. 设n=k时，fn命题成立</strong></p>

<p><strong>3. 证明n=k+1时，fn命题成立</strong></p>

<p><strong>4. 原命题得证</strong></p>

<h2 id="第二类数学归纳法">第二类数学归纳法</h2>

<p><strong>1. 证明n=1，n=2时，fn命题成立</strong></p>

<p><strong>2. 设n &lt; k时，fn命题成立</strong></p>

<p><strong>3. 证明n=k时，fn命题成立</strong></p>

<p><strong>4. 原命题得证</strong></p>
]]></content>
		</item>
		
	</channel>
</rss>
