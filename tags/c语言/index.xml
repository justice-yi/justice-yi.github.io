<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C语言 on Justice-yi &#39;s Blog</title>
    <link>https://justice-yi.github.io/tags/c%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in C语言 on Justice-yi &#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 16 Oct 2019 00:31:55 +0800</lastBuildDate>
    
	<atom:link href="https://justice-yi.github.io/tags/c%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fopen Fclose</title>
      <link>https://justice-yi.github.io/posts/fopen-fclose/</link>
      <pubDate>Wed, 16 Oct 2019 00:31:55 +0800</pubDate>
      
      <guid>https://justice-yi.github.io/posts/fopen-fclose/</guid>
      <description>思前想后一个月，我终于敲下了我的第一篇开山之作。
博客千千万，我的博客首先记录的是学习时候的理解，用于给自己翻阅查找，现在主要研究的是C语言和STM32。如果能帮到你，那是最好的，假如我写的东西有错误欢迎指正，所以请反复对比，仅作参考。其次，这里不仅记录学习，也会写下我在朋友圈不能公开的想法和秘密！
马上进入主题
一、什么是文件？ 　我相信，就算接触过C语言的文件输入输出的人，还会回答：文件不就是鼠标点击的东西嘛！其实不全对，因为在C语言程序中，文件有着更广泛的定义：文件通常是在磁盘或硬盘上的已命名的储存区。
要看到是通常，那么就说明会有不寻常的。对于C程序来说，设备也可以看成是文件！例如屏幕和键盘。看到这里的朋友会有一个疑问：那么C程序和语言有什么关系呢？文件对C程序有什么重要性呢？

简单地理解，文件能够输入一些必要的数据给程序使用以及程序输出数据到文件保存。

&amp;nbsp;
1.1&amp;nbsp; 文件的两种形式 在C程序看来，文件只有两种形式。
 文本文件 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;二进制文件&amp;nbsp;  文本文件即里面的数据都是字符。&amp;nbsp;字符传化成对应的ASCII码存放在内存中。如&amp;ldquo;ABC&amp;rdquo;就分别是&amp;lsquo;A&amp;rsquo;、&#39;B&#39;、&#39;C&#39;存放
二进制文件即里面的数据直接存放在内存中。无需转换为ASCII码，可以理解为机器语言（只有0和1）。例如整数1000转换为二进制为‭0010 0111 0001 0000‬，直接存储在内存中。
二、利用标准IO操作文件 2.1&amp;nbsp; 标准IO（standard high-level I/0）是什么 标准IOANSI C建立的标准函数包和stdio.h头文件中的定义。通俗的来讲就是一些操作IO的库函数，至于是怎么实现的我也不知道。今天我们来讲三个函数：fopen(),&amp;nbsp; fclose().
分别对应着打开文件、关闭文件两个功能。
其次，与标准IO对应着的还有文件IO或者叫底层IO（low-level I/O）。暂时不需要关心。
&amp;nbsp; 2.2&amp;nbsp; 标准文件 一开始提到，一些设备都被C程序看做是文件。所以C语言定义了三个标准文件：标准输入(standard input)、标准输出(standard output)、标准错误输出(standard error output).
分别对应着键盘、屏幕、屏幕。但是，标准错误输出强制性输出到屏幕（即使重定向到其他文件啦显示错误信息）。看到这里看不懂没关系，我们结合下面的函数讲解就懂了。
标准文件和对应文件指针   标准文件 文件指针 通常使用的设备   标准输入 stdin 键盘   标准输出 stdout 显示器　   标准错误输出 stderr 显示器    &amp;nbsp;</description>
    </item>
    
  </channel>
</rss>