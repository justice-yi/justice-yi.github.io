<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Justice-yi &#39;s Blog</title>
    <link>https://justice-yi.github.io/</link>
    <description>Recent content on Justice-yi &#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 16 Oct 2019 00:31:55 +0800</lastBuildDate>
    
	<atom:link href="https://justice-yi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C语言：标准IO_fopen( )、fclose() ①</title>
      <link>https://justice-yi.github.io/posts/fopen-fclose/</link>
      <pubDate>Wed, 16 Oct 2019 00:31:55 +0800</pubDate>
      
      <guid>https://justice-yi.github.io/posts/fopen-fclose/</guid>
      <description>思前想后一个月，我终于敲下了我的第一篇开山之作。
博客千千万，我的博客首先记录的是学习时候的理解，用于给自己翻阅查找，现在主要研究的是C语言和STM32。如果能帮到你，那是最好的，假如我写的东西有错误欢迎指正，所以请反复对比，仅作参考。其次，这里不仅记录学习，也会写下我在朋友圈不能公开的想法和秘密！
马上进入主题
一、什么是文件？ 　我相信，就算接触过C语言的文件输入输出的人，还会回答：文件不就是鼠标点击的东西嘛！其实不全对，因为在C语言程序中，文件有着更广泛的定义：文件通常是在磁盘或硬盘上的已命名的储存区。
要看到是通常，那么就说明会有不寻常的。对于C程序来说，设备也可以看成是文件！例如屏幕和键盘。看到这里的朋友会有一个疑问：那么C程序和语言有什么关系呢？文件对C程序有什么重要性呢？

简单地理解，文件能够输入一些必要的数据给程序使用以及程序输出数据到文件保存。

&amp;nbsp;
1.1&amp;nbsp; 文件的两种形式 在C程序看来，文件只有两种形式。
 文本文件 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;二进制文件&amp;nbsp;  文本文件即里面的数据都是字符。&amp;nbsp;字符传化成对应的ASCII码存放在内存中。如&amp;ldquo;ABC&amp;rdquo;就分别是&amp;lsquo;A&amp;rsquo;、&#39;B&#39;、&#39;C&#39;存放
二进制文件即里面的数据直接存放在内存中。无需转换为ASCII码，可以理解为机器语言（只有0和1）。例如整数1000转换为二进制为‭0010 0111 0001 0000‬，直接存储在内存中。
二、利用标准IO操作文件 2.1&amp;nbsp; 标准IO（standard high-level I/0）是什么 标准IOANSI C建立的标准函数包和stdio.h头文件中的定义。通俗的来讲就是一些操作IO的库函数，至于是怎么实现的我也不知道。今天我们来讲三个函数：fopen(),&amp;nbsp; fclose().
分别对应着打开文件、关闭文件两个功能。
其次，与标准IO对应着的还有文件IO或者叫底层IO（low-level I/O）。暂时不需要关心。
&amp;nbsp; 2.2&amp;nbsp; 标准文件 一开始提到，一些设备都被C程序看做是文件。所以C语言定义了三个标准文件：标准输入(standard input)、标准输出(standard output)、标准错误输出(standard error output).
分别对应着键盘、屏幕、屏幕。但是，标准错误输出强制性输出到屏幕（即使重定向到其他文件啦显示错误信息）。看到这里看不懂没关系，我们结合下面的函数讲解就懂了。
标准文件和对应文件指针   标准文件 文件指针 通常使用的设备   标准输入 stdin 键盘   标准输出 stdout 显示器　   标准错误输出 stderr 显示器    &amp;nbsp;</description>
    </item>
    
    <item>
      <title>更新文章后git的使用步骤</title>
      <link>https://justice-yi.github.io/posts/%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E5%90%8Egit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Wed, 02 Oct 2019 01:26:11 +0800</pubDate>
      
      <guid>https://justice-yi.github.io/posts/%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E5%90%8Egit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/</guid>
      <description>&amp;emsp;自从知道了很简单就可以搭建个人博客之后就一直在捣鼓git，看了一些视频无奈没有时间深入学习git的工作方式，只是大概学习了一下一些命令来满足我发博客的需求。期间因为不懂得git的工作方式而前前后后踩坑无数，现记录一些步骤和命令。
更新内容后如何git一git？  在hugo(基于你使用的平台，不限于hugo)根目录下：
hugo //为你的hugo重新生成文件 hugo server //如果需要的话可以本地预览 在public文件夹下：
git add. //添加内容到本地仓库 git commit -m &amp;#34;提交的信息&amp;#34; //为更新添加更新的信息告诉别人你做了什么更新 git pull origin master //拉取 git push -u origin master //推上去  以上一切基于hugo网站已经搭建完成的情况，更多的搭建方法可以上hugo或者B站学习</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://justice-yi.github.io/about-me/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://justice-yi.github.io/about-me/</guid>
      <description>我是一个想写程序的机械工科生。
 你背单词的时候，阿拉斯加的鳕鱼正越出水面；
你算数学的时候，太平洋彼岸的海鸥振翅掠过城市的上空；
你晚自习的时候，极圈上的夜空散漫了五彩斑斓；
但是少年你别着急，在你为自己未来踏踏实实地努力时；
那些你感觉从来不会看到的景色；
那些你觉得终身不会遇见的人，正一步一步向你走来。
 </description>
    </item>
    
    <item>
      <title>两种数学归纳法</title>
      <link>https://justice-yi.github.io/posts/%E4%B8%A4%E7%A7%8D%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</link>
      <pubDate>Mon, 16 Sep 2019 20:55:17 +0800</pubDate>
      
      <guid>https://justice-yi.github.io/posts/%E4%B8%A4%E7%A7%8D%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</guid>
      <description>第一类数学归纳法 1. 证明n=1时，fn命题成立
2. 设n=k时，fn命题成立
3. 证明n=k+1时，fn命题成立
4. 原命题得证
第二类数学归纳法 1. 证明n=1，n=2时，fn命题成立
2. 设n &amp;lt; k时，fn命题成立
3. 证明n=k时，fn命题成立
4. 原命题得证</description>
    </item>
    
  </channel>
</rss>